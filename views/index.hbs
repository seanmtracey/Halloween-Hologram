<video preload data-active="false" src="/videos/1_edit.mp4"></video>
<video preload data-active="false" src="/videos/2.mp4"></video>
<video preload data-active="false" src="/videos/3.mp4"></video>
<video preload data-active="false" src="/videos/4.mp4"></video>
<video preload data-active="false" src="/videos/5.mp4"></video>
<video preload data-active="false" src="/videos/6.mp4"></video>
<video preload data-active="false" src="/videos/7.mp4"></video>
<video preload data-active="false" src="/videos/8.mp4"></video>
<video preload data-active="false" src="/videos/9.mp4"></video>
<video preload data-active="false" src="/videos/10.mp4"></video>
<video preload data-active="false" src="/videos/11.mp4"></video>

<script>

    (async function(){

        'use strict';

        // Video player variables
        const videos = Array.from(document.body.querySelectorAll('video'));

        let currentVideoPlayer = document.querySelector('video');

        // Posenet variables
        const net = await posenet.load({
            architecture: 'MobileNetV1',
            outputStride: 16,
            inputResolution: { width: 640, height: 480 },
            multiplier: 0.75
        });

        // getUserMedia variables
        const webcamVideo = document.createElement('video');
        const videoConstraints = { video: true };
        const canvas = document.createElement('canvas');

        let videoWidth;
        let videoHeight;
        let videoLastPlayed = 0;

        webcamVideo.setAttribute('autoplay', 'autoplay');

        function playSpookyVideo(){
            
            videos.forEach(video => {
                video.dataset.active = "false";
            });

            currentVideoPlayer = videos[Math.random() * videos.length | 0 ];
            currentVideoPlayer.currentTime = 0;
            currentVideoPlayer.dataset.active = "true";

            currentVideoPlayer.play();
            videoLastPlayed = new Date() / 1000;

        }

        navigator.mediaDevices.getUserMedia(videoConstraints)
            .then(function(stream) {

                console.log(stream);
                videoWidth = stream.getVideoTracks()[0].getSettings().width;
                videoHeight = stream.getVideoTracks()[0].getSettings().height;

                console.log(videoWidth, videoHeight);

                canvas.width = videoWidth;
                canvas.height = videoHeight;

                {{!-- document.body.appendChild(webcamVideo); --}}

                try{
                    const vidURL = window.URL.createObjectURL(stream);
                    webcamVideo.src = vidURL;
                } catch(err){
                    console.log('Unable to createObjectURL for stream. Setting srcObject to stream instead...');
                    webcamVideo.srcObject = stream;
                }

            })
        ;

        setInterval(async function(){

            console.log('PING!');

            if(currentVideoPlayer.paused){
                
                const pose = await net.estimateSinglePose(webcamVideo, {
                    flipHorizontal: false
                });
                console.log(pose);

                if(pose.score > 0.3){
                    
                    const now = new Date() / 1000;

                    if(now - videoLastPlayed > 30){
                        playSpookyVideo();
                    }

                }

            }



        }, 5000);

        window.addEventListener('keyup', function(e){
            console.log(e.keyCode);

            if(e.keyCode === 70){
                document.body.requestFullscreen();
            }

        }, false);


    }());

</script>